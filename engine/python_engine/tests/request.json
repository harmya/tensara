{
  "solution_code": "#include <cuda_runtime.h>\n__global__ void matrixMultiplicationKernel(float* A, float* B, float* C, size_t M, size_t N, size_t K) {\n    int row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n    if (row < M && col < N) {\n        float sum = 0.0f;\n        for (int k = 0; k < K; k++) {\n            sum += A[row * K + k] * B[k * N + col];\n        }\n        C[row * N + col] = sum;\n    }\n}\nextern \"C\" void solution(float* input_a, float* input_b, float* output_c, size_t m, size_t n, size_t k) {\n    dim3 threadsPerBlock(16, 16);\n    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x, \n                   (m + threadsPerBlock.y - 1) / threadsPerBlock.y);\n    \n    matrixMultiplicationKernel<<<numBlocks, threadsPerBlock>>>(input_a, input_b, output_c, m, n, k);\n    cudaDeviceSynchronize();\n}",
  "problem": "matrix_multiplication",
  "gpu": "T4"
}
